# Macros {#sec-macros}

```{r, file = "R/webex.R", include = FALSE}
```

::: callout
**OBJECTIVES**

-   Understand what macros are and how they are used.
-   Learn how to activate the Developer tab.
-   Learn how to record a macro using the macro recorder.
-   Learn how to modify a macro.
-   Learn how to create a command button to run a macro.
-   Understand macro security settings.
:::

You can automate repetitive tasks in Microsoft Excel using macros. A macro consists of a series of commands and functions that are executed sequentially with a single command or the press of a button.

Macros are primarily intended for frequently performed actions or complex operations. Using macros can increase efficiency and reduce the chance of errors.

Simple macros, consisting of a sequence of actions, can be recorded using the built-in macro recorder. More complex macros are programmed in the VBA (Visual Basic for Applications) programming language. This chapter focuses on simple macros, for which you do not need any programming knowledge.

::: callout-note
The language used for Excel macros is Visual Basic for Applications (VBA). Macro commands and functions are stored in a Visual Basic module. The Visual Basic Editor allows you to edit macros, copy macros between modules or workbooks, and rename modules and macros.
:::

## Developer Tab {#sec-tab-developer}

To record, edit, and run macros, the [Developer tab]{.uicontrol} must be visible on the ribbon.

Several Excel functions, including those for Macros and VBA, are located on the Developer tab. This tab is not shown by default when Excel is installed and therefore needs to be made visible first. This is a one-time action.

::: callout-note
First, check if the [Developer tab]{.uicontrol} is already present on the ribbon. If so, you can skip this task.

![The Developer tab on the Excel ribbon.](images/macro/tab-developer.png){#fig-tab-developer}
:::

::: {#prp-tab-developer}
1.  Choose [File \> Options \> Customize Ribbon]{.uicontrol}.

![Excel options showing how to enable the Developer tab.](images/common/excel-options-developertab.png){#fig-excel-options-developertab}

2.  Under [Main Tabs]{.uicontrol} on the right, check the [Developer]{.uicontrol} box and click [OK]{.uicontrol}.

The [Developer tab]{.uicontrol} should now be visible on the ribbon (see @fig-tab-developer).
:::

## Macro Security Settings {#sec-macros-security}

Macros can potentially be used for malicious purposes, such as installing a virus. Excel's security settings can block such threats. However, if the settings are too restrictive, you won't be able to run legitimate macros; if they are too lenient, you won't be protected. A good compromise is the setting that prompts you to decide whether to allow macros, which is also the default setting.

**Change Settings**

To view or change macro security settings, click on [Developer tab \> Macro Security (Code group)]{.uicontrol}.

![Macro Security button on the Developer tab.](images/macro/macro-security-button.png){#fig-macro-security-button}

The **Trust Center** dialog box will appear.

![Macro Settings within the Trust Center dialog box.](images/macro/trust-center-macro-settings.png){#fig-trust-center-macro-settings}

| Setting | Explanation |
|:-----------------------|:-----------------------------------------------|
| Disable macros without notification | Choose this option if you do not want to allow macros. All macros in documents are disabled, along with security alerts about macros. Documents containing macros that you trust can be saved in a trusted location; documents in trusted locations run without security checks. |
| Disable macros with notification | This is the default setting and generally the best choice. With this setting, you will receive a security alert allowing you to choose whether or not to run macros on a case-by-case basis. |
| Disable macros except digitally signed macros | A macro creator can digitally sign a macro. If you designate this creator as a trusted publisher, their signed macros will run without warnings. All unsigned macros will be disabled without notification. |
| Enable all macros (not recommended) | Choose this option if you want to run all macros. This option is not recommended because it leaves your computer vulnerable to potentially malicious code. |

: Overview of Macro Settings. {#tbl-macro-security-settings tbl-colwidths="\[25,75\]"}

## Recording Macros {#sec-macros-recording}

Simple macros can be created by recording your actions using the built-in **macro recorder**. After starting the recorder, all actions are recorded and converted into VBA code in the background. This continues until you stop the recorder.

::: callout-note
To ensure a properly working macro, it's important to first perform the actions manually and write them down step-by-step. You can then use this script to record the actions accurately with the macro recorder.
:::

The button to start recording macros is on Developer Tab in the group [Code]{.uicontrol}, see @fig-tab-developer.

When you click this button to start recording a macro, a dialog box appears where you can enter several properties for the macro.

![Record Macro dialog box.](images/macro/record-macro-dialogbox.png){#fig-record-macro-dialogbox}

**Macro name**

Each macro must have a unique name. Excel suggests a default name like "Macro1". You can change this by typing a different name.

The first character of a macro name must be a letter. Subsequent characters can be letters, numbers, or underscores. Spaces are not allowed in macro names. Always use meaningful names that indicate what the macro does. The underscore can be used as a word separator (e.g., `Format_Cell_Red`).

**Shortcut key**

Macros can be run from the menu or via keyboard shortcuts. These are typically [CTRL]{.uicontrol} combined with a letter key (e.g., [Ctrl+Shift+A]{.uicontrol} if you use an uppercase letter, or [Ctrl+a]{.uicontrol} if you use lowercase). If you want to assign a shortcut key, enter a letter in the box. For example, entering 'a' (lowercase) will assign [Ctrl+a]{.uicontrol}.

Assigning a shortcut key is not required but can be very useful for frequently used macros. Be careful not to overwrite existing Excel shortcuts.

**Store macro in**

You can choose where to store the macro:

-   [This Workbook]{.uicontrol}: The macro will only be available in the current Excel file.
-   [New Workbook]{.uicontrol}: The macro will be stored in a new, blank workbook that is created. (This option is rarely used for general macros).
-   [Personal Macro Workbook]{.uicontrol}: The macro is stored in a special hidden workbook (`Personal.xlsb`) that opens automatically when Excel starts. Macros in this workbook are available in any Excel file you open.

Think carefully about this. If the macro is specific to the active workbook, choose This Workbook. If you want the macro to be available globally in Excel, [Personal Macro Workbook]{.uicontrol} is the best choice. The default is [This Workbook]{.uicontrol}.

**Description**

It's recommended to provide a brief description of what the macro does. While you'll remember its purpose when you create it, a description is helpful for future reference. This is optional.

::: callout-note
All these choices (name, shortcut, storage location, description) can be changed later.
:::

## Macro Cell Format {#sec-macros-cellformat}

*Objective*

Create a macro named [CellFormat]{.varname} that formats the selected cell's text to Comic Sans MS font, bold, italic, 16 pt, and red. The column width should also be adjusted to fit the cell's content.

::: {#prp-macros-cellformat-record}
**Record macro**

1.  Start with an empty worksheet and enter some text in a cell (e.g., cell A1).

2.  elect the cell containing the text.

3.  Go to [Developer tab \> Record Macro (Code group)]{.uicontrol}.

4.  In the Record Macro dialog box, enter the following:

    -   *Macro name*: CellFormat
    -   *Shortcut key*: (leave empty)
    -   *Store macro in*: This Workbook
    -   *Description*: Formats selected cell to Comic Sans MS, 16pt, Bold, Italic, Red, and autofits column.

![Properties for the CellFormat macro.](images/macro/record-macro-cellformat.png){#fig-record-macro-cellformat}

5.  Click [OK]{.uicontrol}.

6.  Perform the following actions on the selected cell:

    -   Right-click on the cell and choose [Format Cells....]{.uicontrol}
    -   Go to the Font tab
    -   Set Font: Comic Sans MS
    -   Set Font style: Bold Italic
    -   Set Size: 16
    -   Set Color: Red
    -   Click [OK]{.uicontrol}.

7.  With the cell still selected, go to [Home tab \> Format (Cells group) \> Autofit Column Width]{.uicontrol}.

8.  Go to [Developer tab \> Stop Recording (Code group)]{.uicontrol}.

![Stop Recording button on the Developer tab.](images/macro/record-macro-stop.png){#fig-record-macro-stop}
:::

Now, test the macro to ensure it works correctly.

::: {#prp-macros-cellformat-test}
**Testing the Macro**

1.  Enter some text in a different cell and select this cell.

2.  Go to [Developer tab \> Macros (Code group)]{.uicontrol}.

3.  In the Macro dialog box, select [CellFormat]{.varname} and click \[Run\]{.uicontrol.

![Running the CellFormat macro from the Macro dialog box.](images/macro/macro-cellformat-run.png){#fig-macro-cellformat-run}

4.  Verify that the cell is formatted correctly according to the macro's actions.

5.  Save the workbook. Since it contains a macro, you must save it as an Excel Macro-Enabled Workbook (\*.xlsm). Name it `CellFormat.xlsm`.
:::

::: callout-warning
When saving a workbook containing macros, Excel might default to saving it as a standard Excel Workbook (`*.xlsx`). This format cannot store macros. You must manually change the "Save as type" to **Excel workbook with macros** with the extension `*.xlsm`.
:::

## Editing Macros {#sec-macros-cellformat-editing}

This task requires the [CellFormat]{.varname} macro created in the previous section (@prp-macros-cellformat-record).

You can modify a macro without re-recording it. Both the macro's options (like shortcut key) and its underlying VBA code can be viewed and edited.

*Objective*

Make the following changes to the [CellFormat]{.varname} macro:

-   Assign the shortcut key "Control t".
-   Change the font size to 18 pt.

::: {#prp-macros-cellformat-editing}
Continue with the file `CellFormat.xlsm` from @prp-macros-cellformat-test.

1.  If necessary, open the `CellFormat.xlsm` file. (Enable content/macros if prompted).

2.  Go to [Developer tab \> Macros (Code group)]{.uicontrol}. The Macro dialog box will appear (see @fig-macro-cellformat-run).

3.  Select the [CellFormat]{.varname} macro and click [Options]{.uicontrol}.

![Macro Options dialog box for CellFormat.](images/macro/macro-cellformat-options.png){#fig-macro-cellformat-options}

4.  In the Shortcut key box, enter t (lowercase). And in the Description box, change "16pt" to "18pt". Then click [OK]{.uicontrol}.

5.  With the CellFormat macro still selected in the Macro dialog box, click [Edit]{.uicontrol}.

The Microsoft Visual Basic for Applications (VBA) editor will open, displaying the macro's code. In this code you will find text size 16 on two places:

``` vba
Format cell in Comic Sans, 16pt, bold, italic and red
.Size = 16
```

6.  Change `16` to `18` in both places.

7.  Close the Microsoft Visual Basic for Applications window (click the X in the top-right corner of the VBA editor window).

8.  Test the modified macro: Select a cell with text and press [Ctrl+t]{.uicontrol}. Verify the font size is now 18pt.

9.  Save the workbook.
:::

## Creating a Command Button {#sec-macros-cellformat-commandbutton}

You can run a macro in one of the following ways:

-   Via the menu [Developer tab \> Macros \> select macro \> Run]{.uicontrol}.
-   Via an assigned shortcut key.
-   Via a command button on the worksheet.

This task demonstrates how to create a command button on the worksheet for the [CellFormat]{.uicontrol} macro.

::: {#prp-macros-cellformat-commandbutton}
Continue with the file `CellFormat.xlsm` from @prp-macros-cellformat-editing.

1.  If necessary, open the file.

2.  Go to [Developer tab \> Insert (Controls group)]{.uicontrol}.

3.  In the Form Controls section, click on [Button (Form Control)]{.uicontrol}

![Form Controls dropdown, with Button (Form Control) highlighted.](images/macro/form-controls.png){#fig-form-controls}

The mouse cursor will change to a small crosshair (`+`).

4.  Click and drag on the worksheet to draw a rectangle where you want the button to appear. Release the mouse button. The ***Assign Macro*** dialog box will immediately appear.

![Assign Macro dialog box, linking CellFormat to the button.](images/macro/macro-cellformat-assign.png){#fig-macro-cellformat-assign}

5.  Select the [CellFormat]{.varname} macro from the list and click [OK]{.uicontrol}.

The rectangle you drew will become a button, typically with default text like "Button 1".

6.  Right-click on the button and choose Edit Text. Select the default text and change it to something more descriptive, for example, "Format Cell".

![Command button on the worksheet linked to the CellFormat macro.](images/macro/macro-cellformat-button.png){#fig-macro-cellformat-button}

7.  Click anywhere outside the button to deselect it.

8.  Test the button: Enter text in a cell, select the cell, and click your new Format Cell button.

9.  Save the workbook.
:::

## Tips {#sec-macros-tips}

### Relative vs. Absolute References {#sec-macros-tips-references}

By default, recorded macros use absolute cell references. This means the exact cell addresses (e.g., A1, C5) are hardcoded into the macro. The macro will always affect those specific cells, regardless of which cell is active when you run it (unless the recorded actions inherently refer to Selection).

If you want a macro to operate relative to the currently active cell (e.g., "move one cell to the right of the active cell"), you need to enable [Use Relative References]{.uicontrol} before you start recording those specific steps. This button is located on the [Developer tab (Code group)]{.uicontrol}.

![Use Relative References button on the Developer tab.](images/macro/record-macro-relative-references.png){#fig-record-macro-relative-references}

::: callout-important
The "Use Relative References" mode is a toggle. It stays active (or inactive) until you click the button again to change its state. Always check its status before recording if reference type is important.
:::

### Deleting Macros {#sec-macros-tips-deleting}

To delete a macro:

-   Go to [Developer tab \> Macros (Code group)]{.uicontrol}.
-   Select the macro you want to delete from the list.
-   Click the [Delete]{.uicontrol} button.
-   Confirm the deletion.

## Exercises {#sec-macros-exercises}

:::: {#exr-macr001}
**Background Color Macro (macr001)**

Record a macro that applies a light gray background color to the currently active cell.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

An example of a solution.

``` vba
Sub Background_Gray()
'
' Lightgray background for active cell
'
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.14996795556505
        .PatternTintAndShade = 0
    End With
End Sub
```

`r unhide()`
:::
::::

:::: {#exr-macr002}
**Percentage Formatting Macro (macr002)**

Record a macro named [PercentageFormat]{.varname} that formats a numeric value in the selected cell as a percentage with one decimal place and also centers the content horizontally within the cell.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

An example of a solution.

``` vba
Sub PercentageFormat()
'
' Numeric value formatted as percentage with 1 dec. and horizontally centered
'
    Selection.NumberFormat = "0.0%"
    With Selection
        .HorizontalAlignment = xlCenter
    End With
End Sub
```

`r unhide()`
:::
::::

:::: {#exr-macr003}
**Formatting Cell A1 (macr003)**

Record a macro that performs the following actions specifically on cell A1 (or related row/column):

-   Sets the height of row 1 to 18.
-   Sets the width of column A to 3.
-   Formats the text in cell A1 to Tahoma font, size 14, bold, and blue color.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

An example of a solution.

``` vba
Sub FormatA1()
'
' exercise macr003
'
    Rows("1:1").Select
    Selection.RowHeight = 18
    Columns("A:A").Select
    Selection.ColumnWidth = 3
    Range("A1").Select
    With Selection.Font
        .Name = "Tahoma"
        .Size = 14
        .Bold = True
        .Color = -4165632
    End With
End Sub
```

`r unhide()`
:::
::::

::::: {#exr-macr004}
**Printing Gridlines Macro (macr004)**

Create a macro that ensures gridlines will be printed for the active sheet.

::: callout-note
This setting can be found under[Page Layout tab \> Page Setup group (dialog launcher) \> Sheet tab]{.uicontrol}.
:::

::: {.content-visible when-format="html:js"}
`r hide("Answer")` An example of a solution.

``` vba
Sub Print_Gridlines()
'
' exercise macr004
'
    With ActiveSheet.PageSetup
        .PrintGridlines = True
    End With
End Sub
```

`r unhide()`
:::
:::::
