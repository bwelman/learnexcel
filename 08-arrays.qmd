# Array Formulas {#sec-arrays}

```{r, file = "R/webex.R", include = FALSE}
```

::: callout
**OBJECTIVES**

-   Introduction to arrays.
-   Creating array formulas.
-   Create frequency distribution of data with FREQUENCY function.
-   Dynamic arrays and associated functions.
-   Mathematical array functions.
:::

An array formula is a formula that can perform multiple calculations on one or more items in an array. Array formulas used to be considered tricky because they look different from regular formulas and required a special entry method: pressing CTRL+SHIFT+ENTER instead of just ENTER. This is no longer the case in Excel 365.

::: callout-important
In Excel 365, the behavior of array formulas has changed compared to other Excel versions. Existing formulas that produce multiple results now behave like array formulas. Several new dynamic array formulas are added to Excel 365.

**Therefore, much of this chapter applies primarily to Excel 365.**
:::

## What is an Array Formula {#sec-arrays-over}

A **vector** is a list of numbers arranged in either a row or a column. A row of numbers is called a **row vector**, and a column of numbers is called a **column vector**. Excel uses the term "array" instead of "vector."

In Excel, an array can be:

-   A row of values (a row vector or a 1-dimensional horizontal array).

-   A column of values (a column vector or a 1-dimensional vertical array).

-   A rectangular block of rows and columns (a 2-dimensional array).

@fig-array-examples illustrates each type.

![Array examples (from left to right): row vector, column vector, 2-D array.](images/arrays/array-examples.png){#fig-array-examples}

You can create an array using constant values, as shown in the examples, by starting a cell entry with the `=` symbol and enclosing a row of values in curly brackets `{}`. The values must be separated by a specific symbol. The appropriate separator depends on the language and regional settings of your computer.

-   For English language systems:
    -   Use a comma (\`,\`) to separate values in a row (new column).
    -   Use a semicolon (\`;\`) to separate rows.
-   For Dutch language systems:
    -   Use a backslash (\`\\\`) to separate values in a row (new column).
    -   Use a semicolon (\`;\`) to separate rows.

Additionally, 2-dimensional arrays must follow these rules:

-   List values in row order.
-   All rows must have the same number of columns.

Here are some examples:

::: {#exm-arrays-rowvector}
**Row vector**

`={1,2,3,4,5}` returns 1 row with 5 columns.

![1-dimensional horizontal array.](images/arrays/array-1dim-h.png){#fig-array-1dim-h}
:::

::: {#exm-arrays-columnvector}
**Column vector**

`={1;3;6}` returns 3 rows with 1 column.

![1-dimensional vertical array.](images/arrays/array-1dim-v.png){#fig-array-1dim-v}
:::

::: {#exm-arrays-2dimarray}
**2-dimensional array**

`={1,2,3,4,5;3,5,7,9,11;6,9,12,15,18}` returns 3 rows with 5 columns.

![2-dimensional array.](images/arrays/array-2dim.png){#fig-array-2dim}
:::

::: callout-important
For all the above examples, only the first cell where you entered the array formula is editable. When you select any other cell within the array's range, the content in the formula bar appears grayed out, and you cannot change its value.
:::

## Simple Array Formulas {#sec-arrays-simple}

An array formula performs calculations on arrays, and the result is also an array. When using array formulas, you need to determine in advance how many results to expect and how those results should be arranged (in a single cell, row, column, or table).

In @fig-example-numbers, you can see the sum and product of two numbers calculated multiple times. This can be done with simple formulas. For instance, the formula in cell D2 could be `=A2+B2`, and the formula in E2 could be `=A2*B2`. Copying these formulas down would apply the correct formulas to D3:E4.

![Sum and product of two numbers using regular Excel formulas.](images/arrays/example-numbers.png){#fig-example-numbers}

However, these calculations can also be performed using array formulas, which is a good practice for understanding how they work.

:::: {#prp-arrays-simple}
[File]{.smallcaps}: `Array1.xlsx`

1.  Open the file.

2.  Select cell D2 and enter `=A2:A4+B2:B4`, then press [ENTER]{.uicontrol}. The results appear in cells D2:D4, with a box around them indicating an array.

![Sum of two columns using an array formula.](images/arrays/example-column-sum.png){#fig-example-column-sum}

::: callout-note
-   Selecting cell addresses with the mouse is easier than typing them.

-   Since the addition results in a column of three numbers, Excel automatically spills the results into cells D3:D4. Ensure these cells are empty beforehand to avoid a `#SPILL!` error.
:::

3.  Select cell E2 and enter `=A2:A4*B2:B4`, then press ENTER. The results appear in cells E2:E4, with a box around them indicating an array.

![Product of two columns using an array formula.](images/arrays/example-column-product.png){#fig-example-column-product}
::::

:::: {#prp-arrays-multiplication1}
**Multiplying a row vector by a constant**

@fig-example-dim1 shows a row of three numbers multiplied by 4. The result is a row of three numbers. Try this example yourself.

![Multiplying a row vector by a constant.](images/arrays/example-dim1.png){#fig-example-dim1}

::: {.content-visible when-format="html:js"}
`r hide("Hint")`

Formula in G1: `=A1:C1*E1`

`r unhide()`
:::
::::

:::: {#prp-arrays-multiplication2}
**Multiplying a 2-dimensional array by a column vector**

@fig-example-dim2 shows a 4x3 array multiplied by a column of numbers. The result is a 4x3 array.

Try this example yourself. You can use the practice file `Array2.xlsx`.

![Multiplying a 2-dimensional array by a column vector.](images/arrays/example-dim2.png){#fig-example-dim2}

::: {.content-visible when-format="html:js"}
`r hide("Hint")`

Formula in G1: `A1:C4*E1:E4`

`r unhide()`
:::
::::

## Calculating a Single Result {#sec-arrays-single}

This section explains how to use a single array formula in situations that might otherwise require multiple formulas.

Use an array formula when you need to perform several calculations to get one result. This simplifies the worksheet by replacing multiple formulas with a single array formula.

@fig-example-shares shows a stock portfolio with prices. To calculate the total value of the shares at a given price, you would typically calculate the value for each stock and then sum those values. An array formula can perform this calculation without intermediate steps.

![Stock prices.](images/arrays/example-shares.png){#fig-example-shares}

:::: {#prp-arrays-single}
[File]{.smallcaps}: `Array3.xlsx`

1.  Open the file.

2.  Select cell C6 and enter the formula `=SUM(B2:B5*C2:C5)`.

3.  Repeat for cell D6; the formula is `=SUM(B2:B5*D2:D5)`.

**Question**

How can you modify the formula in C6 so that it can be copied to D6?

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

Make the first column in the formula in C6 absolute: `=SUM($B$2:$B$5*C2:C5)`.

`r unhide()`
:::
::::

:::: {#prp-arrays-weighted-average1}
[File]{.smallcaps}: `Array4.xlsx`

In this exercise, calculate the weighted average of four test scores for each student using an array formula. Start with a formula for Jan and make it suitable for copying down.

![Weighted averages of test scores.](images/arrays/example-marks.png){#fig-example-marks}

::: {.content-visible when-format="html:js"}
`r hide("Hint")`

1.  Calculate Jan's weighted average by multiplying each test grade by its weighting factor and dividing the sum of these products by the sum of the weighting factors.

2.  To make the formula copiable, determine which cell addresses should remain constant and make them absolute.

`r unhide()`

`r hide("Solution")`

Formula F3: `=SUM(B3:E3*$B$1:$E$1)/SOM($B$1:$E$1)`

Then copy the formula to F4 and F5.

`r unhide()`
:::
::::

:::: {#prp-arrays-weighted-average2}
[File]{.smallcaps}: `Array5.xlsx`

@fig-example-studentlength shows the gender and height (in cm) of several students. The average height for male and female students is calculated in cells C11 and C12.

![Average height by gender.](images/arrays/example-studentlength.png){#fig-example-studentlength}

The array formula here is more complex because it needs to select heights based on gender. The `IF` function can achieve this.

1.  Open the file.

2.  Select cell C11 and enter the formula `=AVERAGE(IF(B2:B9="m",C2:C9))`.

3.  Create a formula for cell C12 by adjusting the formula for female students.

::: {.content-visible when-format="html:js"}
`r hide("Solution")`

Formula C12: `=AVERAGE(IF(B2:B9="f",C2:C9))`

`r unhide()`
:::
::::

## Frequency Distribution {#sec-arrays-frequency}

Use the `FREQUENCY` function to create a frequency distribution.

Syntax: `FREQUENCY(data_array,bins_array)`.

The first argument is the array of values. The second argument is the array of bin boundaries for grouping the values. The result is an array of frequencies.

:::: {#prp-arrays-frequency}
[File]{.smallcaps}: `Array6.xlsx`

![Frequency distribution.](images/arrays/array-frequency.png){#fig-array-frequency}

1.  Open the file.

2.  Enter the formula `=FREQUENCY(A2:A11,B2:B5)` in cell C2.

::: callout-note
The result is a frequency table. @fig-array-frequency-explanation explains how the interval boundaries are handled.

![Explanation of frequency distribution intervals.](images/arrays/array-frequency-explanation.png){#fig-array-frequency-explanation}
:::
::::

## Dynamic Array Formulas {#sec-arrays-dynamic}

An array formula entered in one worksheet cell can output results into multiple cells. This is called **spilling**, and the output occupies a **spill range**. The number of cells in the spill range depends on the formula's result. When the source data changes, the results update dynamically, and the spill range adjusts accordingly. A `#SPILL!` error occurs if other data obstructs the spill range.

To refer to a spill range, append a hash symbol `#` to the address of the first cell in the range. For example, if the spill range is J2:N4, refer to it as `=J2#`. This ensures that the reference adapts if the spill range's size changes.

::: callout-tip
Naming arrays used in formulas can be very helpful. You can name them the same way you name individual cells.
:::

Several new functions support dynamic array behavior: `RANDARRAY`, `FILTER`, `SEQUENCE`, `SORT`, `SORTBY`, `UNIQUE`, `XMATCH` and `XLOOKUP`.

### RANDARRAY {#sec-arrays-randarray}

Returns an array of random numbers. All arguments are optional.

Syntax

`RANDARRAY([rows],[columns],[min],[max],[integer])`

-   `rows`: The number of rows in the returned array (default is 1).
-   `columns`: The number of columns in the returned array (default is 1).
-   `min`: The smallest number to return (default is 0).
-   `max`: The largest number to return (default is 1).
-   `integer`: TRUE for integers, FALSE for decimals (default is FALSE).

::: {#exm-array-randarray}
`=RANDARRAY(3,4,10,50,TRUE)`

![Generates a 3x4 array with random integers between 10 and 50.](images/arrays/array-dyn-randarray.png){#fig-array-dyn-randarray}
:::

### FILTER {#sec-arrays-filter}

Returns filtered values from an array or range.

**Syntax**

`FILTER(array,include,[if_empty])`

-   `array`: The range or array to filter.
-   `include`: An array of Boolean values (TRUE to keep a row/column, FALSE to exclude it).
-   `if_empty`: The value to return if no items are retained.

::: {#exm-array-filter}
[File]{.smallcaps}: `Dynarray.xlsx`

Extract rows where the gender is female.

![Filters a list of names to show only female entries.](images/arrays/array-dyn-filter.png){#fig-array-dyn-filter}

To filter for males or unspecified genders, replace "f" with "m" or "z" in the formula.

You can also use multiple criteria. To filter for women shorter than 170 cm, use: `=FILTER(A32:C41,(B32:B41="f")*(C32:C41<170),"None")`
:::

### SEQUENCE {#sec-arrays-sequence}

Returns a sequence of numbers based on a pattern.

**Syntax**

`SEQUENCE(rows,[columns],[start],[step])`

-   `rows`: The number of rows to return.
-   `columns`: The number of columns to return (default is 1).
-   `start`: The first number in the sequence (default is 1).
-   `step`: The increment between numbers (default is 1).

::: {#exm-array-sequence}
`=SEQUENCE(4,3,5,10)`

![Generates a 4x3 matrix of integers, starting with 5 and incrementing by 10.](images/arrays/array-dyn-sequence.png){#fig-array-dyn-sequence}
:::

### SORT {#sec-arrays-sort}

Sorts the values in a range or array.

**Syntax**

`SORT(array,[sort_index],[sort_order],[by_col])`

-   `array`: The array to sort.
-   `sort_index`: The row or column number to sort by (default is 1).
-   `sort_order`: 1 for ascending, -1 for descending (default is 1).
-   `by_col`: TRUE to sort columns, FALSE to sort rows (default is FALSE).

::: {#exm-array-sort}
[File]{.smallcaps}: `Dynarray.xlsx`

Sort an array by the values in column 3 (length).

![Sorts an array by length (column 3).](images/arrays/array-dyn-sort.png){#fig-array-dyn-sort}
:::

### SORTBY {#sec-arrays-sortby}

Sorts a range or array based on the values in another range or array.

**Syntax**

`SORTBY(array,by_array1,[sort_order], ...)`

-   `array`: The array to sort.
-   `by_array1`: The array to sort by.
-   `sort_order`: 1 for ascending, -1 for descending (default is 1).

::: {#exm-array-sortby}
[File]{.smallcaps}: `Dynarray.xlsx`

Sort names by length.

`=SORTBY(A2:A11,C2:C11)`

![Sorts a list of names by length.](images/arrays/array-dyn-sortby1.png){#fig-array-dyn-sortby1}

The array used for sorting doesn't need to be included in the output.
:::

You can also sort by multiple columns:

::: {#exm-array-sortby2}
[File]{.smallcaps}: `Dynarray.xlsx`

Sort the array by gender (ascending) and then by length (descending).

`=SORTBY(A2:C11,B2:B11,1;C2:C11,-1)`

![An array is sorted ascending by gender, then descending by length.](images/arrays/array-dyn-sortby2.png){#fig-array-dyn-sortby2}
:::

### UNIQUE {#sec-arrays-unique}

Returns an array with unique values from an array.

**Syntax**

`UNIQUE(array,[by_col],[exactly_once])`

-   `array`: The array to extract unique rows or columns from.
-   `by_col`: TRUE to return unique columns, FALSE to return unique rows (default is FALSE).
-   `exactly_once`: TRUE to return values that appear only once, FALSE to return all distinct rows or columns (default is FALSE).

::: {#exm-array-unique}
`UNIQUE(A1:A10)`

Extracts the unique values from a list of names.

![Extracts unique names from a list.](images/arrays/array-dyn-unique.png){#fig-array-dyn-unique}
:::

### XMATCH {#sec-arrays-xmatch}

Searches for a value and returns its position within a row or column. This is a more advanced replacement for the `MATCH` function.

`XMATCH` supports approximate and exact matches, reverse searches, and wildcard characters (`*?`) for partial matches. Searches can start from the first or last value, and it also supports binary searches.

This function is often used with other functions. The `XLOOKUP` function is generally more useful.

**Syntax**

`XMATCH(lookup_value,lookup_array,[match_mode],[search_mode])`

-   `lookup_value`: The value to search for.
-   `lookup_array`: The array to search within.
-   `match_mode`: Specifies the type of match: 0 for exact match, -1 for exact match or next smaller item, 1 for exact match or next larger item, 2 for wildcard match (default is 0).
-   `search_mode`: Specifies the search direction: 1 to search from the first item, -1 from the last item, 2 for binary search (ascending), -2 for binary search (descending).

::: {#exm-array-xmatch}
`=XMATCH(E1,A2:A11)`

Finds the position of a country in the top 10 medal table from the 2016 Summer Olympics.

![Finds the position of a country.](images/arrays/array-dyn-xmatch.png){#fig-array-dyn-xmatch}
:::

### XLOOKUP {#sec-arrays-xlookup}

A modern and versatile replacement for `VLOOKUP`, `HLOOKUP`, and `LOOKUP`. It supports approximate and exact matches, wildcard characters (`*?`), and vertical or horizontal searches.

**Syntax**

`XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])`

-   `lookup_value`: The value to search for.
-   `lookup_array`: The array to search within.
-   `return_array`: The array to return values from.
-   `if_not_found`:  The value to return if no match is found.
-   `match_mode`: Specifies the type of match: 0 for exact match, -1 for exact match or next smaller item, 1 for exact match or next larger item, 2 for wildcard match (default is 0).
-   `search_mode`: Specifies the search direction: 1 to search from the first item (default), -1 from the last item, 2 for binary search (ascending), -2 for binary search (descending).

:::: {#exm-array-xlookup}
`=XLOOKUP(D2,A2:A7,B2:B7,,-1)`

Looks up the discount percentage based on the quantity in a discount table.

![Determines the discount percentage.](images/arrays/array-dyn-xlookup.png){#fig-array-dyn-xlookup}

::: {.info data-latex="\""}
ote the arguments in this formula:

-   `lookup_value`: D2
-   `lookup_array`: A2:A7
-   `return_array`: B2:B7
-   `if_not_found`: Not specified (hence the comma).
-   `match_mode`: -1
-   `search_mode`: Not specified (uses the default).
:::
::::

## Tables and Array Formulas {#sec-arrays-tables}

Array formulas are often used with data lists, especially those with multiple columns. Using Excel tables with these formulas offers advantages: you can use table and column names in formulas, and references update automatically when rows are added or removed.

To refer to a column in an Excel table, use square brackets immediately after the table name: `table_name[column_name]`.


::: {#prp-arrays-tables}
[File:]{.term} `Personnel.xlsx`

1.  Open the file.

2.  Convert the data range to a table using the [Insert tab \> Table]{.uicontrol}, and name the table [tblPersonnel]{.varname}.

3.  Save the file as `Personneltable.xlsx` to preserve the original.

4.  In a cell outside the data area (e.g., K4), enter the formula `=UNIQUE(tblPersonnel[Department])`.

This will create a list of department names. To sort this list alphabetically, nest it within the `SORT` function.

5.  Change the formula to `=SORT(UNIQUE(tblPersonnel[Department]))`.

This will give you a sorted list of department names.

Create a similar sorted list of division names.
:::

## Returning Multiple Values {#sec-arrays-xlookup-multiplevalues}

`XLOOKUP` can return multiple values for a single match. This task demonstrates how to return four values with one formula.

::: {#prp-arrays-xlookup-multiplevalues}
[File:]{.term} `olympic2016.xlsx`

1.  Open the file.

2.  Convert the data range to a table using the [Insert tab\> Table]{.uicontrol}, and name the table [Medals]{.varname}.

3.  Add a [Total]{.varname} column to the table with a formula to calculate the total number of medals:

    -   Enter the text `Total` in cell E1 and press ENTER to create a new column.

    -   In cell E2, type `=SUM(`, select cells B2:D2, type `)`, and press ENTER.

The total medal counts will appear in the `Total` column. Excel changes the formula in E2 to `=SUM(Medals[@[Gold]:[Bronze]])`.

4.  Copy the texts in A1:E1 to G1:K1.

5.  Enter the text `Netherlands` in cell G2.

6.  SIn cell H2, enter the formula:\
    `=XLOOKUP(G2,Medals[Country],Medals[Gold]:Medals[Total])`

The result will look like this:

![XLOOKUP returning multiple values.](images/arrays/array-xlookup-multiplevalues.png){#fig-}
:::

## Two-Way Lookup {#sec-arrays-xlookup-2way}

`XLOOKUP` can also perform two-way lookups by nesting one `XLOOKUP` function within another.

@fig-array-xlookup-2way shows Starbucks coffee prices. Cell G3 should display the price based on the coffee type in G1 and the size in G2.

![Nested XLOOKUP functions for a two-way lookup.](images/arrays/array-xlookup-2way.png){#fig-array-xlookup-2way}

:::: {#prp-arrays-xlookup-2way}
[File:]{.terml} `Tidy001.xlsx`

1.  Open the file.

2.  Enter the data in F1:F3 and G1:G2.

3.  In cell G3, enter the formula:\
    `=XLOOKUP(G2,B1:D1,XLOOKUP(G1,A2:A10,B2:D10))`.

::: callout-note
-   The inner `XLOOKUP` looks up the coffee type in the product column and returns a row of prices.

-   The outer `XLOOKUP` finds the correct size and returns the corresponding price.
:::
::::

## Mathematical array functions {#sec-arrays-math}

 [Linear algebra](https://en.wikipedia.org/wiki/Linear_algebra) involves many arithmetic operations with arrays, and Excel provides specific functions for this. Their use is beyond the scope of this textbook.


MUNIT

:   Identity Matrix.

:   Returns the identity matrix for a given dimension. Primarily used with other matrix functions like MMULT.

MMULT

:   Matrix Multiplication.

:   Returns the matrix product of two arrays.

MINVERSE

:   Matrix Inverse.

:   Returns the inverse of a matrix, used for solving systems of equations. The product of a matrix and its inverse is the identity matrix.

MDETERM

:   Matrix Determinant.

:   Returns the determinant of a matrix, also used in solving systems of equations.

## Exercises {#sec-arrays-exercises}

::: {#exr-matr001}
**Array Addition (matr001)**

Perform the following addition using array formulas.

![](images/arrays/matr001-data.png)
:::

:::: {#exr-matr002}
**Failures per District (matr002)**

[File]{.smallcaps}: `Matr002.xlsx`

A public utility company records gas, water, and electricity failures by district, as shown below. Calculate the total failures per district using array formulas.

![](images/arrays/matr002-data.png)

Enter array formulas in cells C16:C19 to calculate the total failures per district.

::: {.content-visible when-format="html:js"}
`r hide("Hint")`

1. The formula `(B2:B11)=B16` creates a 10-row column array. If a cell in B2:B11 equals B16 ("North"), the array value is TRUE (1); otherwise, it's FALSE (0).

![](images/arrays/matr002-tip1.png)

2.  Multiplying this column array by `{C2:E11}` creates a 10-row, 3-column array. Rows multiplied by FALSE become zeroed; those multiplied by TRUE retain their original values.

![](images/arrays/matr002-tip2.png)

3.  Summing all values in this array gives the total failures for the "North" district.

`r unhide()`
:::
::::

::: {#exr-matr003}
**Random Integers (matr003)**

Use the `RANDARRAY` function to generate random numbers. Create a new file with the following data to experiment with dynamic array formulas:

![](images/arrays/matr003-data.png)

1.  In cell B7, enter a formula to generate random integers, referencing cells B1:B4 for the arguments.

2.  In cell B6, calculate the average of the generated numbers, referencing the spill range.

3.  Experiment with different values in B1:B4. The maximum value must be greater than or equal to the minimum value.
:::

::: {#exr-matr004}
**Random Dates and Times (matr004)**

Excel stores dates and times as numbers. For example, `2020-06-30 18:00:00` is stored as `44012.75`. The part before the decimal is the date, and the part after is the time. You can generate random dates and times using the `RANDARRAY` function.

![](images/arrays/matr004-data.png)

1.  In a new worksheet, enter the data for the first three rows and apply the correct formatting.

2.  In cell B5, enter a formula to generate dates, and in cell E5, a formula to generate times. Use the data in the first three rows as arguments. Apply date/time formatting to the spill ranges.

3.  Experiment with different values in the first three rows. The maximum value must be greater than or equal to the minimum value.
:::

::: {#exr-matr005}
**Sorting Columns (matr005)**

[File]{.smallcaps}: `Benelux-Population.xlsx`

The figure shows the population of the Benelux countries for 2000, 2005, 2010, and 2015. Use the `SORT` function to display this data with the years in reverse order.

![](images/arrays/matr005-data.png)

Open the file and copy the data in columns A and B to H and I, respectively. Enter the `SORT` formula in cell J1 to sort the data by year in descending order. The result should look like this:

![](images/arrays/matr005-solution.png)

Save the file as `matr005.xlsx` to preserve the original.
:::

:::: {#exr-matr006}
**Sequence of Roman Numbers (matr006)**

Create an array with the numbers 1 to 100 in a new worksheet, as shown below.

![](images/arrays/matr006-data.png)

Then, modify the formula to display Roman numerals.

::: {.content-visible when-format="html:js"}
`r hide("Hint")`

The `ROMAN` function converts Arabic numbers to Roman numerals (text).

`r unhide()`
:::

![](images/arrays/matr006-data-r.png)

Save the file as `matr006.xlsx`.
::::
